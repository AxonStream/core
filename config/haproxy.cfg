# HAProxy Configuration for AXONPULS Multi-Server WebSocket Load Balancing
# Optimized for WebSocket connections with sticky sessions and health checks

global
    daemon
    log stdout local0 info
    chroot /var/lib/haproxy
    stats socket /run/haproxy/admin.sock mode 660 level admin
    stats timeout 30s
    user haproxy
    group haproxy
    
    # SSL/TLS Configuration
    ssl-default-bind-ciphers ECDHE+AESGCM:ECDHE+CHACHA20:RSA+AESGCM:RSA+SHA256
    ssl-default-bind-options ssl-min-ver TLSv1.2 no-tls-tickets
    
    # Performance tuning
    tune.ssl.default-dh-param 2048
    tune.bufsize 32768
    tune.maxrewrite 1024

defaults
    mode http
    log global
    option httplog
    option dontlognull
    option log-health-checks
    option forwardfor
    option http-server-close
    
    # Timeouts optimized for WebSocket
    timeout connect 5000ms
    timeout client 300000ms    # 5 minutes for WebSocket connections
    timeout server 300000ms    # 5 minutes for WebSocket connections
    timeout tunnel 3600000ms   # 1 hour for WebSocket tunnels
    timeout http-keep-alive 10s
    timeout check 5000ms
    
    # Error handling
    errorfile 400 /etc/haproxy/errors/400.http
    errorfile 403 /etc/haproxy/errors/403.http
    errorfile 408 /etc/haproxy/errors/408.http
    errorfile 500 /etc/haproxy/errors/500.http
    errorfile 502 /etc/haproxy/errors/502.http
    errorfile 503 /etc/haproxy/errors/503.http
    errorfile 504 /etc/haproxy/errors/504.http

# Statistics interface
frontend stats
    bind *:8080
    stats enable
    stats uri /stats
    stats refresh 30s
    stats admin if TRUE
    stats show-legends
    stats show-desc "AXONPULS Multi-Server Load Balancer"

# Main HTTP/HTTPS frontend
frontend axonpuls_frontend
    bind *:80
    bind *:443 ssl crt /etc/ssl/certs/axonpuls.pem
    
    # Redirect HTTP to HTTPS
    redirect scheme https if !{ ssl_fc }
    
    # CORS headers for WebSocket
    http-response set-header Access-Control-Allow-Origin "*"
    http-response set-header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS"
    http-response set-header Access-Control-Allow-Headers "Origin, X-Requested-With, Content-Type, Accept, Authorization"
    
    # WebSocket upgrade detection
    acl is_websocket hdr(Upgrade) -i websocket
    acl is_websocket_path path_beg /ws
    
    # Health check endpoints
    acl is_health_check path_beg /health
    
    # API endpoints
    acl is_api path_beg /api
    
    # Route WebSocket connections with sticky sessions
    use_backend axonpuls_websocket if is_websocket or is_websocket_path
    
    # Route health checks to dedicated backend
    use_backend axonpuls_health if is_health_check
    
    # Route API requests with load balancing
    use_backend axonpuls_api if is_api
    
    # Default backend for other requests
    default_backend axonpuls_api

# WebSocket backend with sticky sessions
backend axonpuls_websocket
    balance source
    hash-type consistent
    
    # WebSocket specific options
    option httpchk GET /health/ready
    http-check expect status 200
    
    # Sticky sessions based on source IP
    stick-table type ip size 100k expire 30m
    stick on src
    
    # Server definitions with health checks
    server axonpuls-server-1 axonpuls-server-1:3000 check inter 10s rise 2 fall 3 weight 100
    server axonpuls-server-2 axonpuls-server-2:3000 check inter 10s rise 2 fall 3 weight 100
    server axonpuls-server-3 axonpuls-server-3:3000 check inter 10s rise 2 fall 3 weight 100

# API backend with round-robin load balancing
backend axonpuls_api
    balance roundrobin
    
    # Health check configuration
    option httpchk GET /health/live
    http-check expect status 200
    
    # Server definitions
    server axonpuls-server-1 axonpuls-server-1:3000 check inter 15s rise 2 fall 3 weight 100
    server axonpuls-server-2 axonpuls-server-2:3000 check inter 15s rise 2 fall 3 weight 100
    server axonpuls-server-3 axonpuls-server-3:3000 check inter 15s rise 2 fall 3 weight 100

# Health check backend for load balancer health
backend axonpuls_health
    balance roundrobin
    
    # Dedicated health check
    option httpchk GET /health/websocket
    http-check expect status 200
    
    # All servers for comprehensive health checking
    server axonpuls-server-1 axonpuls-server-1:3000 check inter 5s rise 1 fall 2 weight 100
    server axonpuls-server-2 axonpuls-server-2:3000 check inter 5s rise 1 fall 2 weight 100
    server axonpuls-server-3 axonpuls-server-3:3000 check inter 5s rise 1 fall 2 weight 100

# WebSocket-specific frontend (alternative configuration)
frontend axonpuls_websocket_frontend
    bind *:3001
    
    # WebSocket upgrade handling
    option httplog
    capture request header Upgrade len 10
    capture request header Connection len 10
    
    # Route to WebSocket backend
    default_backend axonpuls_websocket_direct

# Direct WebSocket backend (for dedicated WebSocket port)
backend axonpuls_websocket_direct
    mode http
    balance source
    
    # WebSocket connection settings
    timeout server 3600s
    timeout tunnel 3600s
    
    # Health checks for WebSocket endpoints
    option httpchk GET /health/websocket
    http-check expect status 200
    
    # Server definitions for WebSocket ports
    server ws-server-1 axonpuls-server-1:3001 check port 3000 inter 10s rise 2 fall 3
    server ws-server-2 axonpuls-server-2:3001 check port 3000 inter 10s rise 2 fall 3
    server ws-server-3 axonpuls-server-3:3001 check port 3000 inter 10s rise 2 fall 3

# Error handling and maintenance pages
backend maintenance
    mode http
    errorfile 503 /etc/haproxy/errors/maintenance.http

# Rate limiting (optional)
frontend rate_limit
    bind *:8081
    
    # Rate limiting rules
    stick-table type ip size 100k expire 30s store http_req_rate(10s)
    http-request track-sc0 src
    http-request reject if { sc_http_req_rate(0) gt 20 }
    
    default_backend axonpuls_api

# Monitoring and logging configuration
listen axonpuls_monitor
    bind *:9999
    mode http
    stats enable
    stats uri /monitor
    stats refresh 5s
    stats show-legends
    stats admin if TRUE
    
    # Custom monitoring endpoints
    monitor-uri /haproxy-health
    monitor fail if { nbsrv(axonpuls_websocket) lt 2 }
    monitor fail if { nbsrv(axonpuls_api) lt 2 }
